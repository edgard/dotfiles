#!/bin/bash

# Helper for usage errors
_usage() {
    echo "Usage: $1"
}

# Environment
export KUBECTL="kubectl"

# --- Kubernetes (k_) Operations ---
k_get_events() {
    $KUBECTL get events --sort-by='{.lastTimestamp}'
}

k_get_nodes() {
    $KUBECTL get nodes -o custom-columns="NAME:.metadata.name,READY:.status.conditions[?(@.type==\"Ready\")].status,VERSION:.status.nodeInfo.kubeletVersion,ARCH:.status.nodeInfo.architecture,KARP_REG:.metadata.labels.karpenter\.sh/registered,KARP_INIT:.metadata.labels.karpenter\.sh/initialized,KARP_TAINT:.spec.taints[?(@.value==\"Karpenter\")].key,DEL_SINCE:.metadata.deletionTimestamp"
}

k_get_keys() {
    $KUBECTL get key -o custom-columns="NAME:.metadata.name,READY:.status.conditions[?(@.type==\"Ready\")].status,SYNCED:.status.conditions[?(@.type==\"Synced\")].status,EXTERNAL-NAME:.metadata.annotations.crossplane\.io/external-name,OWNER-KIND:.metadata.ownerReferences[*].kind"
}

k_set_node_termination() {
    [ -z "$1" ] && _usage "k_set_node_termination <nodeclaim-name>" && return 1
    $KUBECTL patch "nodeclaim.karpenter.sh/$1" --type=merge -p '{"metadata":{"annotations":{"karpenter.sh/nodeclaim-termination-timestamp":"'"$(date -u +"%Y-%m-%dT%H:%M:%SZ")"'"}}}'
}

k_remove_finalizers() {
    [ $# -lt 2 ] && _usage "k_remove_finalizers <resource-type> <resource-name> [-n <namespace>]" && return 1
    $KUBECTL patch --type=merge -p '{"metadata":{"finalizers":null}}' "$@"
}

k_get_conditions() {
    [ -z "$1" ] && _usage "k_get_conditions <resource-type>" && return 1
    $KUBECTL get "$1" -o jsonpath="{range .items[*]}{.metadata.name}{' '}{.status..conditions[*].type}{'\n- '}{.status..conditions[*].status}{'\n'}{end}" | column -ts ' '
}

# --- Runtime (rt_) Operations ---
rt_trace_runtime() {
    [ -z "$1" ] && _usage "rt_trace_runtime <cluster-id>" && return 1
    local namespace
    namespace=$($KUBECTL get "XEKSRuntime/$1" -o jsonpath="{.metadata.labels.crossplane\.io/claim-namespace}")
    [ -z "$namespace" ] && echo "Namespace not found for cluster ID: $1" && return 1
    crossplane beta trace --concurrency=20 "nrfruntime" -n "$namespace" "$1" | grep -v 'Role\|Rule\|Target\|Queue\|Key'
}

rt_get_details() {
    [ -z "$1" ] && _usage "rt_get_details <cluster-id>" && return 1
    local namespace
    namespace=$($KUBECTL get "XEKSRuntime/$1" -o jsonpath="{.metadata.labels.crossplane\.io/claim-namespace}")
    $KUBECTL get "nrfruntime" -n "$namespace" "$1" -oyaml | yq 'del(.status.platform.app, .status.runtime.eks.certificateAuthorityData, .spec.spotinst)'
}

rt_login_to_prod() {
    [ -z "$1" ] && _usage "rt_login_to_prod <runtime-name>" && return 1
    local rt="$1" ns region
    [[ "$($KUBECTL config current-context)" != "npe-prod-us-west-2" ]] && {
        echo "Current context is not npe-prod-us-west-2, logging to prod..."
        npe-auth -e prod -c npe-prod-us-west-2 -p
    }
    ns=$($KUBECTL get "XEKSCluster/$rt" -o jsonpath="{.metadata.labels.crossplane\.io/claim-namespace}" | cut -d'-' -f2)
    region=$($KUBECTL get "XEKSCluster/$rt" -o jsonpath="{.spec.resourceConfig.region}")
    NPECTL_IS_OKTA_QA=false NPECTL_NPE_SUPPORT=true NPECTL_RUNTIME_NAME="$rt" npectl runtime login -a "$ns" -r "$region"
}

rt_login_to_runtime() {
    [ -z "$1" ] && _usage "rt_login_to_runtime <runtime-name>" && return 1
    local rt="$1" ns region env
    ns=$($KUBECTL get "XEKSCluster/$rt" -o jsonpath="{.metadata.labels.crossplane\.io/claim-namespace}")
    region=$($KUBECTL get "XEKSCluster/$rt" -o jsonpath="{.spec.resourceConfig.region}")
    env=$($KUBECTL get -n "$ns" "NRFRuntime/$rt" -o jsonpath="{.spec.env}")
    npe-auth -e "$env" -r "$region" -t -c "nike-platformengine-$rt" -p
}

rt_list_runtimes() {
    $KUBECTL get nrfruntime -A -o custom-columns="NAMESPACE:.metadata.labels.crossplane\.io/claim-namespace,NAME:.metadata.name,REGION:.spec.region,NRF:.spec.platformTemplate.runtime.git.targetRevision,EKS:.spec.eks.kubernetesVersion,SYNCED:.status.conditions[?(@.type==\"Synced\")].status,READY:.status.conditions[?(@.type==\"Ready\")].status,PAUSED:.metadata.annotations.crossplane\.io/paused,RLT_PAUSED:.metadata.annotations.rollout/paused,READYDEL:.metadata.annotations.nrf/ready-to-delete,CORE:.status..resources.*[?(@.name==\"nrf-core-components\")].health.status,XP_CORE:.status..resources.*[?(@.name==\"nrf-crossplane-core-components\")].health.status,SEC:.status..resources.*[?(@.name==\"nrf-security-components\")].health.status,XP:.status..resources.*[?(@.name==\"nrf-crossplane-components\")].health.status,GITOPS:.status..resources.*[?(@.name==\"nrf-gitops-components\")].health.status,NET:.status..resources.*[?(@.name==\"nrf-networking-components\")].health.status,OBS:.status..resources.*[?(@.name==\"nrf-observability-components\")].health.status,ADDONS:.status..resources.*[?(@.name==\"nrf-addons-components\")].health.status"
}

rt_get_versions() {
    $KUBECTL get nrfruntime -A -o custom-columns="NAMESPACE:.metadata.labels.crossplane\.io/claim-namespace,NAME:.metadata.name,REGION:.spec.region,REV:.status.platform.app..revision,NRF:.spec.platformTemplate.runtime.git.targetRevision,CORE:.spec.platformTemplate.runtimeComponents[?(@.git.repo==\"nrf-core-components\")].git.targetRevision,XP_CORE:.spec.platformTemplate.runtimeComponents[?(@.git.repo==\"nrf-crossplane-core-components\")].git.targetRevision,SEC:.spec.platformTemplate.runtimeComponents[?(@.git.repo==\"nrf-security-components\")].git.targetRevision,XP:.spec.platformTemplate.runtimeComponents[?(@.git.repo==\"nrf-crossplane-components\")].git.targetRevision,GITOPS:.spec.platformTemplate.runtimeComponents[?(@.git.repo==\"nrf-gitops-components\")].git.targetRevision,NET:.spec.platformTemplate.runtimeComponents[?(@.git.repo==\"nrf-networking-components\")].git.targetRevision,OBS:.spec.platformTemplate.runtimeComponents[?(@.git.repo==\"nrf-observability-components\")].git.targetRevision,ADDONS:.spec.platformTemplate.runtimeComponents[?(@.git.repo==\"nrf-addons-components\")].git.targetRevision"
}

rt_get_status() {
    $KUBECTL get XNRFRuntime -o yaml -o custom-columns="NAMESPACE:.spec.claimRef.namespace,NAME:.spec.claimRef.name,REGION:.spec.region,ID:metadata.name,STATUS:.status.conditions[?(@.type==\"Ready\")].reason"
}

# --- ArgoCD (argo_) Operations ---
argo_portforward_server() {
    $KUBECTL port-forward svc/nrf-argocd-server -n argocd-system 8080:443
}

argo_list_apps() {
    $KUBECTL get application -n argocd-system -o custom-columns="NAME:.metadata.name,SYNC:.status.sync.status,HEALTH:.status.health.status,WAVE:.metadata.annotations.argocd\.argoproj\.io/sync-wave" --sort-by='{.metadata.annotations.argocd\.argoproj\.io/sync-wave}'
}

argo_list_revisions() {
    $KUBECTL get application -n argocd-system -o custom-columns="NAME:.metadata.name,SYNC:.status.sync.status,HEALTH:.status.health.status,WAVE:.metadata.annotations.argocd\.argoproj\.io/sync-wave,REV:.status.sync.revision,REVISION:.status.operationState.operation.sync.revision"
}

argo_list_paths() {
    $KUBECTL get application -n argocd-system -o custom-columns="NAME:.metadata.name,SYNC:.status.sync.status,HEALTH:.status.health.status,PATH:.spec.source.path"
}

argo_get_app_status() {
    [ -z "$1" ] && _usage "argo_get_app_status <app-name>" && return 1
    $KUBECTL get application "$1" -n argocd-system -o jsonpath="{.status.resources}" | jq -r '.. | arrays | .[] | "\(.kind) \(.name) \(.namespace) \(.status) \(.health.status)"' | column -ts ' '
}

# --- AWS Operations ---
aws_get_identity() {
    aws sts get-caller-identity
}

aws_list_eks_clusters() {
    [ -z "$1" ] && _usage "aws_list_eks_clusters <region>" && return 1
    aws eks list-clusters --region "$1"
}

# --- NPE CLI (npectl_) Operations ---
npectl_run_local() {
    [ -z "$1" ] && _usage "npectl_run_local <command>" && return 1
    LOCAL_API=true npe-npectl "${@}"
}

npectl_run_dev() {
    [ -z "$1" ] && _usage "npectl_run_dev <command>" && return 1
    DEV_API=true npe-npectl "${@}"
}

npectl_run_test() {
    [ -z "$1" ] && _usage "npectl_run_test <command>" && return 1
    TEST_API=true npe-npectl "${@}"
}

npectl_run_qa() {
    [ -z "$1" ] && _usage "npectl_run_qa <command>" && return 1
    QA_API=true npe-npectl "${@}"
}

npectl_run_prod() {
    [ -z "$1" ] && _usage "npectl_run_prod <command>" && return 1
    PROD_API=true npe-npectl "${@}"
}

# --- Platform Operations ---
platform_list_platforms() {
    $KUBECTL get platforms -o custom-columns="NAMESPACE:.metadata.labels.crossplane\.io/claim-namespace,ACCOUNT:.spec.forProvider.clusters[0].accountID,NAME:.metadata.name,ZONE:.spec.forProvider.runtime.vars.internal-hosted-zone,NRF:.spec.forProvider.runtime.git.targetRevision,READY:.status.conditions[?(@.type==\"Ready\")].status,PAUSED:.metadata.annotations.crossplane\.io/paused"
}

platform_get_issues() {
    [ -z "$1" ] && _usage "platform_get_issues <platform-name>" && return 1
    $KUBECTL get Platform "$1" -o jsonpath="{.status.atProvider.app..resources}" | jq -r '.. | arrays | .[] | "\(.name) \(.status) \(.health.status)"' | grep -v 'Synced Healthy' | column -ts ' '
}

platform_get_resources() {
    [ -z "$1" ] && _usage "platform_get_resources <platform-name>" && return 1
    $KUBECTL get Platform "$1" -o jsonpath="{.status.atProvider.app..resources}" | jq -r '.. | arrays | .[] | "\(.name) \(.status) \(.health.status)"' | column -ts ' '
}

platform_set_pause() {
    [ $# -lt 1 ] && _usage "platform_set_pause <platform-name> [platform-name...]" && return 1

    # Process each platform passed as an argument
    for RES in "$@"; do
        echo "Pausing platform: $RES"
        $KUBECTL annotate platforms.gitops.nrf.crossplane.io "$RES" crossplane.io/paused="true" --overwrite
        $KUBECTL annotate platforms.gitops.nrf.crossplane.io "$RES" crossplane.io/external-create-pending- --overwrite
    done
}

platform_set_unpause() {
    [ $# -lt 1 ] && _usage "platform_set_unpause <platform-name> [platform-name...]" && return 1

    # Process each platform passed as an argument
    for RES in "$@"; do
        echo "Unpausing platform: $RES"
        $KUBECTL annotate platforms.gitops.nrf.crossplane.io "$RES" crossplane.io/paused="false" --overwrite
        $KUBECTL annotate platforms.gitops.nrf.crossplane.io "$RES" crossplane.io/external-create-pending- --overwrite
    done
}

platform_get_paused() {
    echo "Platforms currently paused:"
    $KUBECTL get platforms.gitops.nrf.crossplane.io -A -o=jsonpath='{range .items[?(@.metadata.annotations.crossplane\.io/paused=="true")]}{.metadata.name}{"\n"}{end}'
}

platform_get_unpaused() {
    echo "Platforms currently unpaused:"
    $KUBECTL get platforms.gitops.nrf.crossplane.io -A -o=jsonpath='{range .items[?(@.metadata.annotations.crossplane\.io/paused=="false")]}{.metadata.name}{"\n"}{end}'
}

# --- Crossplane (cp_) Operations ---
cp_trace_runtime() {
    [ -z "$1" ] || [ -z "$2" ] && _usage "cp_trace_runtime <namespace> <runtime>" && return 1
    crossplane beta trace "nrfruntime" -n "$1" "$2"
}

cp_trace_runtime_wide() {
    [ -z "$1" ] || [ -z "$2" ] && _usage "cp_trace_runtime_wide <namespace> <runtime>" && return 1
    crossplane beta trace "nrfruntime" -n "$1" "$2" --output=wide
}

cp_get_claim_resources() {
    [ -z "$1" ] && _usage "cp_get_claim_resources <claim-name>" && return 1
    $KUBECTL get NRFRuntime,XNRFRuntime,XEKSRuntime,XEKSAddon,XEKSCluster,XEKSSecurityGroup,XEKSService,XSpotInst,Platform,NikeTags,MetaData,Usage,ClusterAuth,Cluster,ProviderConfig,RolePolicyAttachment,Role.iam,Key,SecurityGroupRule,SecurityGroup,Release,Object,InstanceProfile,Aws,Addon,OpenIDConnectProvider -l crossplane.io/claim-name="$1" -A --no-headers
}

cp_get_object() {
    [ -z "$1" ] && _usage "cp_get_object <resource-name>" && return 1
    $KUBECTL get Object -o jsonpath="{range .items[?(@.metadata.annotations.crossplane\.io/composition-resource-name=='$1')]}{.metadata.name}{' '}{.status.atProvider.manifest.status.conditions[*].type}{'\n- '}{.status.atProvider.manifest.status.conditions[*].status}{'\n'}{end}" | column -ts ' '
}

cp_get_usage() {
    [ -z "$1" ] && _usage "cp_get_usage <claim-name>" && return 1
    $KUBECTL get Usage -l crossplane.io/claim-name="$1" -o custom-columns="KIND:.metadata.kind,NAME:.metadata.name,DEL:.metadata.deletionTimestamp"
}

# --- Rollout Operations ---
rollout_list_rollouts() {
    $KUBECTL get rollouts.release.nrf.crossplane.nike.com -o "custom-columns=NAME:.metadata.name,TARGET_REV:.spec.forProvider.tenants[0].targetRevision,TARGET_REV_NRF:.spec.forProvider.nrf.targetRevision,READY:.status.conditions[?(@.type==\"Ready\")].status,SYNCED:.status.conditions[?(@.type==\"Synced\")].status"
}

rollout_get_components() {
    $KUBECTL get rollouts.release.nrf.crossplane.nike.com -o "custom-columns=NAME:.metadata.name,READY:.status.conditions[?(@.type==\"Ready\")].status,SYNCED:.status.conditions[?(@.type==\"Synced\")].status,CORE:.spec.forProvider.nrfComponents[?(@.repo==\"nrf-core-components\")].targetRevision,XP_CORE:.spec.forProvider.nrfComponents[?(@.repo==\"nrf-crossplane-core-components\")].targetRevision,SEC:.spec.forProvider.nrfComponents[?(@.repo==\"nrf-security-components\")].targetRevision,XP:.spec.forProvider.nrfComponents[?(@.repo==\"nrf-crossplane-components\")].targetRevision,GITOPS:.spec.forProvider.nrfComponents[?(@.repo==\"nrf-gitops-components\")].targetRevision,NET:.spec.forProvider.nrfComponents[?(@.repo==\"nrf-networking-components\")].targetRevision,OBS:.spec.forProvider.nrfComponents[?(@.repo==\"nrf-observability-components\")].targetRevision,ADDONS:.spec.forProvider.nrfComponents[?(@.repo==\"nrf-addons-components\")].targetRevision"
}

# --- Help function ---
aliases_help() {
    echo "Available aliases by category:"
    echo ""
    echo "Kubernetes (k_) commands:"
    echo "  k_get_events              - Show events sorted by timestamp"
    echo "  k_get_nodes               - List nodes with detailed information"
    echo "  k_get_keys                - List keys with detailed information"
    echo "  k_set_node_termination    - Terminate a Karpenter node"
    echo "  k_remove_finalizers       - Remove finalizers from a resource"
    echo "  k_get_conditions          - Get conditions for a resource type"
    echo ""
    echo "Runtime (rt_) commands:"
    echo "  rt_trace_runtime          - Trace a runtime cluster"
    echo "  rt_get_details            - Get details about a runtime"
    echo "  rt_login_to_prod          - Login to a production runtime"
    echo "  rt_login_to_runtime       - Login to a runtime"
    echo "  rt_list_runtimes          - List available runtimes"
    echo "  rt_get_versions           - Get versions of runtime components"
    echo "  rt_get_status             - Get runtime status"
    echo ""
    echo "ArgoCD (argo_) commands:"
    echo "  argo_portforward_server   - Start a port-forward to the ArgoCD server"
    echo "  argo_list_apps            - List ArgoCD applications"
    echo "  argo_list_revisions       - List revisions for ArgoCD applications"
    echo "  argo_list_paths           - List paths for ArgoCD applications"
    echo "  argo_get_app_status       - Get status of an ArgoCD application"
    echo ""
    echo "AWS commands:"
    echo "  aws_get_identity          - Get caller identity"
    echo "  aws_list_eks_clusters     - List EKS clusters in a region"
    echo ""
    echo "NPE CLI (npectl_) commands:"
    echo "  npectl_run_local          - Run npectl with LOCAL_API flag"
    echo "  npectl_run_dev            - Run npectl with DEV_API flag"
    echo "  npectl_run_test           - Run npectl with TEST_API flag"
    echo "  npectl_run_qa             - Run npectl with QA_API flag"
    echo "  npectl_run_prod           - Run npectl with PROD_API flag"
    echo ""
    echo "Platform commands:"
    echo "  platform_list_platforms   - List available platforms"
    echo "  platform_get_issues       - Get issues for a platform"
    echo "  platform_get_resources    - Get resources for a platform"
    echo "  platform_set_pause        - Pause a platform"
    echo "  platform_set_unpause      - Unpause a platform"
    echo "  platform_get_paused       - List paused platforms"
    echo "  platform_get_unpaused     - List unpaused platforms"
    echo ""
    echo "Crossplane (cp_) commands:"
    echo "  cp_trace_runtime          - Trace a runtime using crossplane"
    echo "  cp_trace_runtime_wide     - Trace a runtime with wide output"
    echo "  cp_get_claim_resources    - Get resources for a claim"
    echo "  cp_get_object             - Get object status"
    echo "  cp_get_usage              - Get usage for a claim"
    echo ""
    echo "Rollout commands:"
    echo "  rollout_list_rollouts     - List available rollouts"
    echo "  rollout_get_components    - Get rollout components"
}
