#!/usr/bin/env bash

# If not running interactively, don't do anything
# We only set history size here to avoid truncating in non-interactive shells
export HISTSIZE=100000
export HISTFILESIZE=100000
[[ ${-} != *i* ]] && return

# --- Locale Configuration ---
export LC_ALL="${LC_ALL:-en_US.UTF-8}"
export LANG="${LANG:-en_US.UTF-8}"
export LANGUAGE="${LANGUAGE:-en_US.UTF-8}"

# --- History Configuration ---
shopt -s cmdhist                                       # Save multi-line commands as one history entry
shopt -s histappend                                    # Append to history, don't overwrite
shopt -s histverify                                    # Verify history entries before executing
shopt -s histreedit                                    # Allow re-editing failed history substitutions
shopt -s lithist                                       # Save multi-line commands with newlines, not semicolons
export HISTCONTROL='ignoreboth:erasedups'              # Ignore duplicates and blank lines
export HISTIGNORE='ls:cd:pwd:exit:bg:fg:clear:history' # Commands to not save in history

# --- Shell Behavior Options ---
shopt -s checkwinsize            # Update window size after each command
shopt -s dirspell                # Correct minor spelling errors in directory names
shopt -s cdspell                 # Correct minor spelling errors in cd
shopt -s no_empty_cmd_completion # Don't tab complete on an empty line

# --- Prompt Configuration ---
# Basic Input Behavior
bind 'set editing-mode emacs'          # Use Emacs key bindings
bind 'set bell-style none'             # Disable audible/visual bell
bind 'set echo-control-characters off' # Hide "^C" when pressing Ctrl+C
bind 'set enable-bracketed-paste on'   # Better paste handling (avoids autoexecuting)
bind 'set revert-all-at-newline on'    # History editing doesn't change original

# Completion Behavior & Matching
bind 'set completion-ignore-case on'     # Ignore case during completion
bind 'set completion-map-case on'        # Treat - and _ as identical
bind 'set mark-symlinked-directories on' # Add / to symlinked directories
bind 'set skip-completed-text on'        # Skip text matching next character

# Completion Display & Appearance
bind 'set show-all-if-ambiguous on'        # Show completions on ambiguous Tab
bind 'set show-all-if-unmodified on'       # Show completions even if no change
bind 'set colored-completion-prefix on'    # Color the common prefix in completions
bind 'set colored-stats on'                # Color file‑type indicators
bind 'set visible-stats on'                # Show file‑type colors in listings
bind 'set menu-complete-display-prefix on' # Show the common prefix in menu-complete

# Navigation Controls
bind 'TAB:menu-complete'               # Cycle through completions with Tab
bind '"\e[Z": menu-complete-backward'  # Shift+Tab to go backwards
bind '"\e[A": history-search-backward' # Up‑arrow: search history backwards
bind '"\e[B": history-search-forward'  # Down‑arrow: search history forwards

# --- Command Availability Cache ---
# Cache command existence checks to avoid repeated lookups
declare -A _cmd_cache=()
_has_cmd() {
    local cmd="$1"
    [[ -z "$cmd" ]] && return 1
    [[ -z "${_cmd_cache[$cmd]}" ]] && _cmd_cache[$cmd]=$(command -v "$cmd" &>/dev/null && echo 1 || echo 0)
    [[ "${_cmd_cache[$cmd]}" == "1" ]]
}

# --- PATH Configuration ---
# macOS path_helper
[[ "${OSTYPE}" == darwin* && -x "/usr/libexec/path_helper" ]] && eval "$(/usr/libexec/path_helper -s)"

# Homebrew setup
if _has_cmd brew; then
    eval "$(brew shellenv)"
else
    brew_paths=(
        "/opt/homebrew/bin/brew"              # Apple Silicon
        "/usr/local/bin/brew"                 # Intel Mac
        "/home/linuxbrew/.linuxbrew/bin/brew" # System-wide Linux install
        "${HOME}/.linuxbrew/bin/brew"         # User-specific Linux install
    )

    for brew_path in "${brew_paths[@]}"; do
        if [[ -x "${brew_path}" ]]; then
            eval "$("${brew_path}" shellenv)"
            break
        fi
    done
    unset brew_path brew_paths
fi

# Go environment
if _has_cmd go; then
    export GOPATH="${HOME}/.go"
    export PATH="${PATH}:${GOPATH}/bin"
fi

# Node.js environment
if _has_cmd node; then
    export NPM_CONFIG_PREFIX="${HOME}/.npm-global"
    export PATH="${PATH}:${NPM_CONFIG_PREFIX}/bin"
fi

# User Custom Paths
user_paths=(
    "${HOME}/.local/bin"
    "${HOME}/Documents/Projects/dev-utils/bin"
)
for user_path in "${user_paths[@]}"; do
    [[ -d "${user_path}" ]] && export PATH="${PATH}:${user_path}"
done
unset user_path user_paths

# --- Path Sanitization ---
if [[ -n "${PATH}" ]]; then
    declare -A seen_paths=()
    new_path=""
    IFS=":" read -r -a path_array <<<"${PATH}"
    for dir in "${path_array[@]}"; do
        [[ -z "${dir}" ]] && continue
        real_dir=$(realpath "$dir" 2>/dev/null) || real_dir="$dir"
        if [[ -d "$real_dir" ]] && [[ -z "${seen_paths["$real_dir"]}" ]]; then
            seen_paths["$real_dir"]=1
            new_path+="${dir}:"
        fi
    done
    unset IFS
    if [[ -n "${new_path}" ]]; then
        export PATH="${new_path%:}"
    fi
    unset new_path seen_paths path_array dir real_dir
fi

# --- Environment Variables and Utility Initialization ---
# Pager and less configuration
export PAGER='less'
export LESSHISTFILE='-'
if _has_cmd less; then
    if less --help 2>&1 | grep -q -- '--use-color'; then
        export LESS='--use-color -R -i -j4 -M -X -F'
        export MANPAGER='less --use-color -R -Dd+r -Du+b'
    else
        export LESS='-R -i -j4 -M -X -F'
        export MANPAGER='less -R -Dd+r -Du+b'
    fi
fi
export MANROFFOPT='-c'

# Editor configuration
if [[ "${TERM_PROGRAM}" == "vscode" ]] && _has_cmd code; then
    export EDITOR='code -w'
    export VISUAL='code -w'
elif _has_cmd nvim; then
    export EDITOR='nvim'
    export VISUAL='nvim'
elif _has_cmd vim; then
    export EDITOR='vim'
    export VISUAL='vim'
elif _has_cmd vi; then
    export EDITOR='vi'
    export VISUAL='vi'
fi

# Dircolors for ls
if [[ "${OSTYPE}" == linux* ]]; then
    if [[ -f "${HOME}/.dir_colors" ]] && _has_cmd dircolors; then
        eval "$(dircolors -b "${HOME}/.dir_colors")" 2>/dev/null || echo "Warning: Failed to eval dircolors" >&2
    fi
elif [[ "${OSTYPE}" == darwin* ]]; then
    if _has_cmd gdircolors && [[ -f "${HOME}/.dir_colors" ]]; then
        eval "$(gdircolors -b "${HOME}/.dir_colors")" 2>/dev/null || echo "Warning: Failed to eval gdircolors" >&2
    else
        export CLICOLOR=1
        export LSCOLORS='exfxbxdxDxhbxDxecex'
    fi
fi

# --- Aliases ---
_has_cmd grep && alias grep='grep --color=auto --exclude-dir={.git,.hg,.svn} --binary-files=without-match'
_has_cmd diff && alias diff='diff --color=auto'
_has_cmd ip && alias ip='ip --color=auto'
_has_cmd dmesg && alias dmesg='dmesg --color=auto'
_has_cmd journalctl && alias journalctl='journalctl --output=short-precise --catalog --no-pager'
_has_cmd watch && alias watch='watch --color'

if [[ "${OSTYPE}" == darwin* ]]; then
    if _has_cmd gls; then
        # shellcheck disable=SC2262
        alias ls='gls -F --color=auto --group-directories-first'
    else
        alias ls='ls -F -G'
    fi
else
    if ls --color=auto &>/dev/null 2>&1; then
        alias ls='ls -F --color=auto --group-directories-first'
    else
        alias ls='ls -F'
    fi
fi

if _has_cmd kubectl; then
    alias k='kubectl'
    alias kg='kubectl get'
    alias kl='kubectl logs'
    alias kd='kubectl describe'
    alias krm='kubectl delete'
    _has_cmd kubens && alias kns='kubens'
    _has_cmd kubectx && alias kctx='kubectx'
fi

# --- Post-Initialization Tasks ---
# WSL2 runtime dir fix
if [[ "${OSTYPE}" == linux* ]] && grep -qi microsoft /proc/version 2>/dev/null; then
    expected_runtime_dir="/run/user/$(id -u)"
    if [[ -z "${XDG_RUNTIME_DIR}" || "${XDG_RUNTIME_DIR}" != "${expected_runtime_dir}" ]]; then
        export XDG_RUNTIME_DIR="${expected_runtime_dir}"
    fi
    if [[ ! -d "${XDG_RUNTIME_DIR}" ]]; then
        if command -v sudo >/dev/null 2>&1; then
            sudo mkdir -p "${XDG_RUNTIME_DIR}" 2>/dev/null &&
                sudo chmod 700 "${XDG_RUNTIME_DIR}" 2>/dev/null &&
                sudo chown "$(id -u):$(id -g)" "${XDG_RUNTIME_DIR}" 2>/dev/null
        fi
    fi
    unset expected_runtime_dir
fi

# VS Code shell integration
if [[ "${TERM_PROGRAM}" == "vscode" ]] && _has_cmd code; then
    if vscode_integration_path="$(code --locate-shell-integration-path bash 2>/dev/null)" && [[ -r "${vscode_integration_path}" ]]; then
        # shellcheck disable=SC1090
        source "${vscode_integration_path}"
    fi
    unset vscode_integration_path
fi

# --- Utility Hooks ---
if _has_cmd fzf; then
    export FZF_DEFAULT_OPTS='--height 10 --layout=reverse --color=bg+:#414559,bg:#303446,spinner:#f2d5cf,hl:#e78284 --color=fg:#c6d0f5,header:#e78284,info:#ca9ee6,pointer:#f2d5cf --color=marker:#f2d5cf,fg+:#c6d0f5,prompt:#ca9ee6,hl+:#e78284'
    if _has_cmd fd; then
        export FZF_DEFAULT_COMMAND='fd --type f --hidden --follow --exclude .git'
        export FZF_CTRL_T_COMMAND="${FZF_DEFAULT_COMMAND}"
        export FZF_ALT_C_COMMAND='fd --type d --hidden --follow --exclude .git'
    fi
    eval "$(fzf --bash)" 2>/dev/null || echo "Warning: Failed to initialize fzf" >&2
fi

if _has_cmd direnv; then
    export DIRENV_LOG_FORMAT=""
    eval "$(direnv hook bash)" 2>/dev/null || echo "Warning: Failed to initialize direnv" >&2
fi

if _has_cmd starship; then
    eval "$(starship init bash)" 2>/dev/null || echo "Warning: Failed to initialize starship" >&2
fi

if _has_cmd zoxide; then
    eval "$(zoxide init bash)" 2>/dev/null || echo "Warning: Failed to initialize zoxide" >&2
fi

# --- Cleanup ---
unset _cmd_cache
unset -f _has_cmd
