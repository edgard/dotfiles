#!/usr/bin/env zsh
# --- Zsh Runtime Configuration ---
# This file is sourced for interactive shells.
# It sets up shell behavior, history, completion, key bindings, and sources custom configurations.

# --- Core ZSH Setup ---

# Define essential Zsh directories and files.
export ZDOTDIR="${ZDOTDIR:-$HOME}/.zsh"
export ZSH="${ZDOTDIR:-$HOME}/.zsh"
export ZSH_COMPDUMP="${ZDOTDIR:-$HOME}/.zcompdump-${ZSH_VERSION}" # Completion cache file

# Load Zsh modules for improved performance and features.
zmodload zsh/zutil     # Core utilities
zmodload zsh/complist  # Enhanced completion list display
zmodload zsh/parameter # Faster parameter handling (used by history)
zmodload zsh/terminfo 2>/dev/null # Terminal capabilities (for key bindings)

# --- Shell Behavior Options ---

# Input/Output
setopt MULTIOS              # Allow multiple redirections (e.g., > file1 > file2)
setopt CLOBBER              # Allow > to overwrite existing files (default)
setopt COMBINING_CHARS      # Handle Unicode combining characters correctly
setopt INTERACTIVE_COMMENTS # Allow comments starting with # in interactive shells
setopt NO_BEEP              # Disable audible bell on errors
setopt NO_MAIL_WARNING      # Disable "you have mail" notifications

# General Behavior
setopt HASH_LIST_ALL         # Hash command locations on first use for speed
setopt PATH_SCRIPT           # Search PATH for scripts even if not marked executable
setopt PROMPT_SUBST          # Allow parameter expansion and command substitution in prompts
setopt SHORT_LOOPS           # Allow shorter loop syntax (e.g., for i ({1..3}) ...)
setopt NO_WARN_CREATE_GLOBAL # Suppress warnings when creating global variables

# --- History Configuration ---

HISTFILE="${ZDOTDIR:-$HOME}/.zsh_history" # Path to the history file
HISTSIZE=1000000                         # Max history entries in memory
SAVEHIST=1000000                         # Max history entries saved to file

# History Behavior Options
setopt SHARE_HISTORY          # Share history instantly across all running shells
setopt EXTENDED_HISTORY       # Save timestamp and duration for each command
setopt HIST_VERIFY            # Show command before executing from history expansion
setopt HIST_FCNTL_LOCK        # Use fcntl locking for better history file concurrency
setopt HIST_LEX_WORDS         # Treat complex commands as single history entries
setopt HIST_REDUCE_BLANKS     # Remove superfluous blanks from history entries
setopt HIST_IGNORE_SPACE      # Ignore commands starting with a space
setopt HIST_FIND_NO_DUPS      # Don't show duplicate consecutive commands when searching
setopt HIST_EXPIRE_DUPS_FIRST # Remove older duplicates first when trimming history
setopt HIST_IGNORE_ALL_DUPS   # Never store duplicate commands
setopt HIST_SAVE_NO_DUPS      # Don't write duplicate consecutive commands to the history file

# --- Directory Navigation ---

setopt AUTO_PUSHD        # Automatically pushd when changing directories with cd
setopt PUSHD_TO_HOME     # `pushd` without arguments goes to $HOME
setopt PUSHD_MINUS       # Allow `cd -N` to navigate back N directories in the stack
setopt PUSHD_SILENT      # Suppress printing the directory stack after pushd/popd
setopt PUSHD_IGNORE_DUPS # Don't push duplicate directories onto the stack
setopt NO_AUTO_CD        # Disable implicit cd when typing a directory name

# --- Completion System ---

# Initialize the completion system
autoload -Uz compinit

# Regenerate completion cache only if older than 24 hours for faster startup.
if [[ -n ${ZSH_COMPDUMP}(#qN.mh+24) ]]; then
  compinit -d ${ZSH_COMPDUMP} # Initialize, creating dump file if needed
  # Asynchronously compile the completion dump for faster loading next time.
  { zcompile ${ZSH_COMPDUMP} } &!
else
  # Load completions quickly from existing cache.
  compinit -C -d ${ZSH_COMPDUMP}
fi

# Completion Styling and Behavior
zstyle ':completion:*' use-cache on
zstyle ':completion:*' cache-path "${ZSH_COMPDUMP}.cache"
zstyle ':completion:*' menu select # Enable menu selection for completions
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' # Case-insensitive matching

# Completion Options
setopt ALWAYS_TO_END     # Move cursor to the end of the completed word
setopt AUTO_LIST         # Automatically list choices on ambiguous completion
setopt AUTO_MENU         # Show completion menu after second consecutive tab press
setopt AUTO_PARAM_SLASH  # Add a trailing slash to completed directory names
setopt COMPLETE_ALIASES  # Complete aliases as full commands
setopt COMPLETE_IN_WORD  # Allow completion from within a word
setopt LIST_PACKED       # Display completion list compactly
setopt MAGIC_EQUAL_SUBST # Perform filename expansion after '=' (e.g., `make file=`)
setopt NO_CORRECT        # Disable auto-correction of commands
setopt NO_CORRECT_ALL    # Disable auto-correction of arguments
setopt NO_LIST_BEEP      # Disable beep on ambiguous completion

# --- Pattern Matching and Globbing ---

setopt EXTENDED_GLOB   # Enable extended globbing features (like `^` for negation)
setopt RC_EXPAND_PARAM # Expand array parameters in substitutions (e.g., ${array[@]})
setopt NO_CASE_GLOB    # Case-sensitive globbing (pathname expansion)
setopt NO_CASE_MATCH   # Case-sensitive pattern matching
setopt NO_NOMATCH      # If a pattern has no match, leave it unchanged (don't error)

# --- Job Control ---

setopt AUTO_RESUME    # Attempt to resume existing jobs matching the command typed
setopt CHECK_JOBS     # Report status of background jobs before exiting the shell
setopt LONG_LIST_JOBS # Display detailed job information for the `jobs` command
setopt NOTIFY         # Report status of background jobs immediately upon completion
setopt NO_BG_NICE     # Don't run background jobs at a lower priority
setopt NO_HUP         # Don't send HUP signal to background jobs on shell exit

# --- Key Bindings ---

# Use Emacs-style key bindings
bindkey -e

# Set key timeout for multi-key sequences (e.g., widgets)
KEYTIMEOUT=1

# --- Custom Configurations ---

# Source all .zsh files from the ZDOTDIR.
# Use a loop to source files individually and report errors.
for config_file in "${ZDOTDIR:-$HOME}/"*.zsh; do
    # Check if the file exists and is readable before sourcing
    if [[ -f "$config_file" && -r "$config_file" ]]; then
        source "$config_file" || print -P "%F{red}Error sourcing ${config_file}%f" >&2
    fi
done
unset config_file # Clean up the loop variable
