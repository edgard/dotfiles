#!/usr/bin/env bash

##############################################################################
# OS-Specific System Package Installation
##############################################################################

{{ if eq .chezmoi.os "linux" -}}
echo "Installing essential Linux system packages..."

if command -v apt-get >/dev/null 2>&1; then
    # Debian/Ubuntu
    sudo apt update
    sudo apt install -y build-essential python3 curl unzip git zsh
elif command -v dnf >/dev/null 2>&1; then
    # Fedora/RHEL
    sudo dnf update -y
    sudo dnf install -y gcc gcc-c++ make python3 curl unzip git zsh
elif command -v pacman >/dev/null 2>&1; then
    # Arch Linux
    sudo pacman -Syu --noconfirm
    sudo pacman -S --noconfirm base-devel python curl unzip git zsh
fi
{{ end -}}

{{ if eq .chezmoi.os "darwin" -}}
echo "Installing essential macOS system packages..."

# Trigger Command Line Developer Tools installation by attempting to use git
if ! xcode-select -p &>/dev/null; then
    echo "Command Line Developer Tools not found. Triggering installation..."
    git --version

    echo ""
    echo "⚠️  IMPORTANT: Please complete the Command Line Developer Tools installation prompt."
    echo "   When the installation is complete, press Enter to continue..."
    read -r

    # Verify installation completed
    if ! xcode-select -p &>/dev/null; then
        echo "Command Line Developer Tools installation appears to have failed."
        echo "Please install manually with: xcode-select --install"
        echo "Then run this script again."
        exit 1
    else
        echo "Command Line Developer Tools installation completed successfully."
    fi
fi
{{ end -}}

##############################################################################
# Homebrew Installation (Cross-Platform)
##############################################################################

echo "Checking Homebrew installation..."

if ! command -v brew >/dev/null 2>&1; then
    echo "Installing Homebrew..."
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

    # Add Homebrew to PATH
    if [[ "${OSTYPE}" == "darwin"* ]]; then
        if [[ -f "/opt/homebrew/bin/brew" ]]; then
            eval "$(/opt/homebrew/bin/brew shellenv)"
        elif [[ -f "/usr/local/bin/brew" ]]; then
            eval "$(/usr/local/bin/brew shellenv)"
        fi
    elif [[ "${OSTYPE}" == "linux"* ]]; then
        if [[ -f "/home/linuxbrew/.linuxbrew/bin/brew" ]]; then
            eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
        fi
    fi
fi

##############################################################################
# Oh My Zsh Installation (Cross-Platform)
##############################################################################

if [[ ! -d "${HOME}/.oh-my-zsh" ]]; then
    echo "Installing Oh My Zsh..."
    # Use --unattended to install without interaction
    # It will NOT change the default shell automatically in unattended mode
    sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh) --unattended"
    # Check if the installation directory exists now
    if [[ ! -d "${HOME}/.oh-my-zsh" ]]; then
        echo "Oh My Zsh installation failed."
        # Optionally exit if OMZ is critical
        # exit 1
    else
        echo "Oh My Zsh installed successfully."
    fi
else
    echo "Oh My Zsh is already installed."
fi

##############################################################################
# Cross-Platform Finalization
##############################################################################

# Set zsh as default shell if not already
if [[ "$SHELL" != *"zsh"* ]]; then
    echo "Setting zsh as default shell..."
    chsh -s "$(which zsh)"
fi

echo "System and user package installation complete."
